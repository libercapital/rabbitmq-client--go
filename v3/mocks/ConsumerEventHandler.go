// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	rabbitmq "github.com/libercapital/rabbitmq-client-go/v3"
	mock "github.com/stretchr/testify/mock"
)

// ConsumerEventHandler is an autogenerated mock type for the ConsumerEventHandler type
type ConsumerEventHandler struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, data
func (_m *ConsumerEventHandler) Execute(ctx context.Context, data rabbitmq.IncomingEventMessage) bool {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, rabbitmq.IncomingEventMessage) bool); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewConsumerEventHandler creates a new instance of ConsumerEventHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsumerEventHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConsumerEventHandler {
	mock := &ConsumerEventHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
