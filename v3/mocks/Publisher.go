// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	rabbitmq "github.com/libercapital/rabbitmq-client-go/v3"
	mock "github.com/stretchr/testify/mock"

	tracing "github.com/libercapital/liber-logger-go/tracing"
)

// Publisher is an autogenerated mock type for the Publisher type
type Publisher struct {
	mock.Mock
}

// GetExchangeName provides a mock function with given fields:
func (_m *Publisher) GetExchangeName() (*string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExchangeName")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func() (*string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueueName provides a mock function with given fields:
func (_m *Publisher) GetQueueName() (*string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetQueueName")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func() (*string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMessage provides a mock function with given fields: ctx, exchange, routingKey, mandatory, immediate, message, trace
func (_m *Publisher) SendMessage(ctx context.Context, exchange string, routingKey string, mandatory bool, immediate bool, message rabbitmq.PublishingMessage, trace tracing.SpanConfig) error {
	ret := _m.Called(ctx, exchange, routingKey, mandatory, immediate, message, trace)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool, bool, rabbitmq.PublishingMessage, tracing.SpanConfig) error); ok {
		r0 = rf(ctx, exchange, routingKey, mandatory, immediate, message, trace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPublisher creates a new instance of Publisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *Publisher {
	mock := &Publisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
