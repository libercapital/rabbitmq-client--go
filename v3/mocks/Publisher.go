// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	rabbitmq "gitlab.com/bavatech/architecture/software/libs/go-modules/rabbitmq-client.git/v3"
)

// Publisher is an autogenerated mock type for the Publisher type
type Publisher struct {
	mock.Mock
}

// GetExchangeName provides a mock function with given fields:
func (_m *Publisher) GetExchangeName() (*string, error) {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueueName provides a mock function with given fields:
func (_m *Publisher) GetQueueName() (*string, error) {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMessage provides a mock function with given fields: exchange, routingKey, mandatory, immediate, message
func (_m *Publisher) SendMessage(exchange string, routingKey string, mandatory bool, immediate bool, message rabbitmq.PublishingMessage) error {
	ret := _m.Called(exchange, routingKey, mandatory, immediate, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bool, bool, rabbitmq.PublishingMessage) error); ok {
		r0 = rf(exchange, routingKey, mandatory, immediate, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewPublisherT interface {
	mock.TestingT
	Cleanup(func())
}

// NewPublisher creates a new instance of Publisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPublisher(t NewPublisherT) *Publisher {
	mock := &Publisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
