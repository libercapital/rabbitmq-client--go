// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	amqp091 "github.com/rabbitmq/amqp091-go"

	mock "github.com/stretchr/testify/mock"

	rabbitmq "gitlab.com/bavatech/architecture/software/libs/go-modules/rabbitmq-client.git/v3"
)

// Consumer is an autogenerated mock type for the Consumer type
type Consumer struct {
	mock.Mock
}

// GetQueue provides a mock function with given fields:
func (_m *Consumer) GetQueue() amqp091.Queue {
	ret := _m.Called()

	var r0 amqp091.Queue
	if rf, ok := ret.Get(0).(func() amqp091.Queue); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(amqp091.Queue)
	}

	return r0
}

// SubscribeEvents provides a mock function with given fields: ctx, consumerEvent, concurrency
func (_m *Consumer) SubscribeEvents(ctx context.Context, consumerEvent rabbitmq.ConsumerEvent, concurrency int) error {
	ret := _m.Called(ctx, consumerEvent, concurrency)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, rabbitmq.ConsumerEvent, int) error); ok {
		r0 = rf(ctx, consumerEvent, concurrency)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewConsumerT interface {
	mock.TestingT
	Cleanup(func())
}

// NewConsumer creates a new instance of Consumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConsumer(t NewConsumerT) *Consumer {
	mock := &Consumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
